#!/usr/bin/env python3
"""
Script pour ajouter la table router_devices √† la base de donn√©es
"""

import sqlite3

DB_PATH = '/var/www/html/vpn-logger/vpn_logs.db'

def add_routers_table():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()

    print("üîÑ Ajout de la table router_devices...")

    # Cr√©er la table router_devices
    c.execute('''CREATE TABLE IF NOT EXISTS router_devices (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL UNIQUE,
        unifi_host TEXT UNIQUE,
        alarm_id TEXT,
        company_id INTEGER NOT NULL,
        description TEXT,
        created_at TEXT DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (company_id) REFERENCES companies(id) ON DELETE CASCADE
    )''')

    print("‚úÖ Table 'router_devices' cr√©√©e")

    # Ajouter le routeur par d√©faut "UDM Pro SE - Fresnes sur Escaut" ‚Üí NIDAPLAST
    try:
        c.execute('''INSERT INTO router_devices (name, unifi_host, alarm_id, company_id, description)
                     VALUES (?, ?, ?, ?, ?)''',
                  ('UDM Pro SE - Fresnes sur Escaut',
                   'UDM Pro SE - Fresnes sur Escaut',
                   '0199b8f8-31d0-7a22-bd3f-fa94e3ede1d7',
                   1,
                   'Routeur principal NIDAPLAST'))
        print("‚úÖ Routeur par d√©faut ajout√© (UDM Pro SE ‚Üí NIDAPLAST)")
    except sqlite3.IntegrityError:
        print("‚ö†Ô∏è  Routeur par d√©faut existe d√©j√†")

    conn.commit()
    conn.close()

    print("\n‚úÖ Migration termin√©e avec succ√®s!")
    print("\nüìã Prochaines √©tapes:")
    print("   1. Les √©v√©nements seront automatiquement assign√©s √† la bonne soci√©t√©")
    print("   2. G√©rez les routeurs depuis l'interface admin")
    print("   3. Red√©marrez le service: systemctl restart vpn-logger")

if __name__ == '__main__':
    add_routers_table()
